
Writing HTML with accessibility in mind :
---------------------------------------

A great deal of web content can be made accessible just by making sure the correct Hypertext Markup Language elements are used for the correct purpose at all times.

With the button example in mind: 
Buttons have more suitable styling by default
A screen reader identifies it as a button
Focusable
Clickable
Built-in keyboard accessibility
//Semantic HTML//
As you learn more about HTML, you'll keep seeing a common theme: the importance of using semantic HTML. This means using the correct HTML elements for their intended purpose as much as possible.
You might wonder why this is so important. After all, you can use a combination of CSS and JavaScript to make just about any HTML element behave in whatever way you want.
For example you can make a <div> element to behave like button:
<div>Play video</div>

But as you'll see in greater detail later on, it makes sense to use the correct element for the job:
<button>Play video</button>

//So why should we use Semantic HTML ?//

       - With the button example in mind: 
+ Buttons have more suitable styling by default
+ A screen reader identifies it as a button
+ Focusable
+ Clickable
+ Built-in keyboard accessibility

//Semantic markup benefits beyond accessibility//

1 - Easier to develop with: as mentioned above, you get some functionality for free, plus it is arguably easier to understand.
2 - Better on mobile:  semantic HTML is arguably lighter in file size than non-semantic spaghetti code, and easier to make responsive.
3 - Good for SEO:  search engines give more importance to keywords inside headings, links, etc. than keywords included in non-semantic <div>s, etc.,
so your documents will be more findable by customers.

//Headings Are Important//

Search engines use the headings to index the structure and content of your web pages.
Users skim your pages by its headings. It is important to use headings to show the document structure and the relationships between different sections.
<h1> headings should be used for main headings, followed by <h2> headings, then the less important <h3>, and so on.

Note: Use HTML headings for headings only. Don't use headings to make text BIG or bold.

//Always remember to use Alternative Text//

The alt attribute provides an alternate text for an image, if the user for some reason cannot view it (because of slow connection, an error in the src attribute, 
or if the user uses a screen reader).
The value of the alt attribute should describe the image:
<img src="img_chania.jpg" alt="Flowers in Chania">

If a browser cannot find an image, it will display the value of the alt attribute.

*Sometimes it’s better to add a blank alt attribute to an <img> element*
If the image is purely decorative or doesn’t add valuable information, consider embedding it with CSS as a background image. 
If you have/want to add it in HTML, don’t remove the alt attribute, but leave it empty

<img src="decorative_image.jpg" alt="" />
Omitting this attribute altogether indicates that the image is a key part of the content, and no textual equivalent is available

//It’s important to define the natural language of your document//

Telling the browser which language you are using in your document has many benefits. It’s good for SEO, it helps third-party translation tools and browsers
to identify the right language and dictionary. Defining the correct language in an HTML page helps assistive technology to choose the correct voice profile or character set
-----------------------------------------------------------------------------
<html lang="en">
    …
</html>
-----------------------------------------------------------------------------

*What if we switch language in the middle of our document?

In that case can use the [lang] attribute on specific tags like this :

<p>There is a certain <i lang="fr" class="idiomatic">je ne sais quoi</i> in the air.</p>

//Use Clear Language//

Always use a clear language, that is easy to understand. Also try to avoid characters that cannot be read clearly by a screen reader. For example:
+ Keep sentences as short as possible
+ Avoid dashes. Instead of writing 1-3, write 1 to 3
+ Avoid abbreviations. Instead of writing Feb, write February
+ Avoid slang words

//The [title] Attribute//
The title attribute specifies extra information about an element.
The information is most often shown as a tooltip text when the mouse moves over the element.
The title attribute can be used on any HTML element:
<p><abbr title="World Health Organization">WHO</abbr> was founded in 1948.</p>


//ARIA (Accessible Rich Internet Applications)//

ARIA defines a variety of markup extensions, usually HTML5 attributes, that can be added to elements to give screen readers more information about the element and help
visually-impaired users better grasp what’s happening on the webpage.
For instance, one useful ARIA attribute is the role attribute. When added to an element,
this will provide the screen reader with extra context about what that element’s function is in context of a page :
<nav role="navigation">
 <ul>
   <li>Put navigation here</li>
 </ul>
</nav>







